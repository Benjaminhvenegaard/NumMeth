.TH GETRAN 3NR  "April 17, 1996" "NR" "NR Programmer's Manual"
.SH NAME
getran \- get a sequence of random numbers from a database
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "unsigned char *getran(unsigned char *" "arr" ", size_t " "len" ");"
.SH DESCRIPTION
.B getran()
takes a pointer to an array of unsigned characters and a length, and
stores in that array the given number of random bytes. These bytes are
not created by any pseudo-random formula, but are
retrieved from a database stored on disk.
.PP
This database is specified by a
.I list
file and a
.I state
file. The
.I list
file is simply a newline-terminated list of the database files of random
bytes. The 
.I state
file contains a single line representating the positions within the database.
This line should be one of the files listed in the
.I list
file, followed by a number indicating the offset into that file.
When
.B getran()
is called, it reads in the state file, goes to the given position in the
file indicated, and
begins reading bytes. If the number of bytes needed exceeds that
currently left in the file, it goes on to the next file in the
.I list
file. After the necessary amount has been read, it writes out a new
.I state
file with the new position in the database (the file currently in use
followed by the offset in it).
.PP
If more bytes are request than remain unused in the whole database,
this is a fatal error. Delete the current
.I state
file and start over.
.PP
If the
.I state
file does not exist, it is created.
.PP
To find the name of the
.I list
file, first the environment variable
.B NRRANLIST
is checked. If that environment variable doesn't exist, then a check for a
.B HOME 
environment variable is done, and if that exists the routine
looks to see if there is a file
.B $HOME/.nr_ranlist
.br
If that file isn't present, or there is no
.B HOME 
environment variable, a hard-coded default name is used.
.PP
To find the name of the
.I state
file, first the environment variable
.B NRRANSTATE
is checked. If that environment variable doesn't exist, then a check for a
.B HOME 
environment variable is done, and if that exists the routine
uses the name (note this behavior is different from the above, this file
does not have to exist)
.B $HOME/.nr_ranstate
.br
Otherwise, a hard-coded default name is used.
.PP
You can call 
.B getran()
for single bytes, but the overhead involved in each call probably
makes this a bad idea.
.SH "ENVIRONMENT VARIABLES"
.B NRRANLIST
\- the name of the
.I list
file
.PP
.B NRRANSTATE
\- the name of the
.I state
file
.SH "RETURN VALUE"
.BR getran()
returns the array argument passed to it. It should return
.B NULL
on error, but all errors are currently treated as fatal errors.
.SH "EXAMPLES"
A typical 
.I list
file might look like:

/cdrom/nr/random/random.000
.br
/cdrom/nr/random/random.001
.br
/cdrom/nr/random/random.002
.br
/cdrom/nr/random/random.003

	and so on.
.PP
A typical 
.I state
file might look like:

/cdrom/nr/random/random.002 1723

.SH "BUGS"
.PP
There is some attempt at implementing file locking for a share
.I state
file, with a
.B LOCKS
option.
.B USING SHARED STATE FILES IS NOT RECOMMENDED.
No representation is made that the code adequately deals with potential
conflicts, race conditions, and user-interface issues involved.
.SH "SEE ALSO"
.BR rand "(3)"


